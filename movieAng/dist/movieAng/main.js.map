{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/actor/actor.component.css","webpack:///./src/app/actor/actor.component.html","webpack:///./src/app/actor/actor.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/database.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<div class=\\\"jumbotron text-center\\\">\\n        <h1>Actors DB System</h1>\\n      </div>\\n      \\n      <!-- The navigation bar -->\\n      <nav class=\\\"navbar navbar-expand-sm bg-light\\\">\\n        <ul class=\\\"navbar-nav\\\">\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n            <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(1)\\\">Home</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n            <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(2)\\\">Add Actor</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n            <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(3)\\\">Update Actor</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n            <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(4)\\\">Delete Actor</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n            <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(5)\\\">View Movies</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n            <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(6)\\\">Create Movie</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n                <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(7)\\\">Delete Movie</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n                <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(8)\\\">Add Movie to Actor</a>\\n          </li>\\n          <li class=\\\"nav-item\\\" style=\\\"padding-left:0.2in\\\">\\n              <a class=\\\"btn btn-primary\\\" (click)=\\\"changeSection(9)\\\">Top 3</a>\\n        </li>\\n        </ul>\\n      </nav>\\n      \\n      <!-- First section: Display all in a tble -->\\n      <div class=\\\"section\\\" *ngIf=\\\"section==1\\\">\\n        <table class=\\\"table table-striped\\\">\\n          <tr>\\n            <th>Name</th>\\n            <th>Birth Year</th>\\n          </tr>\\n          <tr *ngFor=\\\"let item of actorsDB\\\">\\n            <td>{{item.name}}</td>\\n            <td>{{item.bYear}}</td>\\n          </tr>\\n        </table>\\n      </div>\\n      \\n      <!-- Second Section: Add new actor -->\\n      <div class=\\\"section\\\" *ngIf=\\\"section==2\\\">\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"actorName\\\">Full Name</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"actorName\\\" [(ngModel)]=\\\"fullName\\\">\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label for=\\\"actorName\\\">Birth Year</label>\\n          <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"actorName\\\" [(ngModel)]=\\\"bYear\\\">\\n        </div>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSaveActor()\\\">Save Actor</button>\\n      </div>\\n      \\n      <!-- Section 3: Update actor -->\\n      \\n      <div class=\\\"section\\\" *ngIf=\\\"section==3\\\">\\n        <table class=\\\"table table-striped\\\">\\n          <tr>\\n            <th>Name</th>\\n            <th>Birth Year</th>\\n            <th>Select!</th>\\n          </tr>\\n          <tr *ngFor=\\\"let item of actorsDB\\\">\\n            <td>{{item.name}}</td>\\n            <td>{{item.bYear}}</td>\\n            <td><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSelectUpdate(item)\\\">Update</button></td>\\n          </tr>\\n        </table>\\n        <hr>\\n        <div *ngIf=\\\"actorsDB.length>0\\\">\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"actorName\\\">Full Name</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"actorName\\\" [(ngModel)]=\\\"fullName\\\">\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <label for=\\\"actorName\\\">Birth Year</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"actorYear\\\" [(ngModel)]=\\\"bYear\\\">\\n          </div>\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onUpdateActor()\\\">Update Actor</button>\\n        </div>\\n      </div>\\n      \\n      <!-- Section 4: Delete Actor -->\\n      <div class=\\\"section\\\" *ngIf=\\\"section==4\\\">\\n        <table class=\\\"table table-striped\\\">\\n          <tr>\\n            <th>Name</th>\\n            <th>Birth Year</th>\\n            <th>Delete?</th>\\n          </tr>\\n          <tr *ngFor=\\\"let item of actorsDB\\\">\\n            <td>{{item.name}}</td>\\n            <td>{{item.bYear}}</td>\\n            <td><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onDeleteActor(item)\\\">Delete</button></td>\\n          </tr>\\n        </table>\\n      </div>\\n\\n      <!-- Fifth section: Display movies all in a tble -->\\n        <div class=\\\"section\\\" *ngIf=\\\"section==5\\\">\\n            <table class=\\\"table table-striped\\\">\\n                <tr>\\n                    <th>Title</th>\\n                    <th>Year</th>\\n                    <th>Actors</th>\\n                </tr>\\n                <tr *ngFor=\\\"let item of moviesDB\\\">\\n                    <td>{{item.title}}</td>\\n                    <td>{{item.year}}</td>\\n                    <td>{{item.actors}}</td>\\n                </tr>\\n            </table>\\n        </div>\\n\\n       <!-- sixth Section: Add new movie -->\\n       <div class=\\\"section\\\" *ngIf=\\\"section==6\\\">\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"movieTitle\\\">Movie title</label>\\n              <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" [(ngModel)]=\\\"title\\\">\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label for=\\\"movieYear\\\">Year</label>\\n              <input type=\\\"number\\\" class=\\\"form-control\\\" id=\\\"year\\\" [(ngModel)]=\\\"year\\\">\\n            </div>\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSaveMovie()\\\">Save Movie</button>\\n        </div>\\n\\n        <!-- Seventh Section : Delete Movie -->\\n        <div class=\\\"section\\\" *ngIf=\\\"section==7\\\">\\n                <table class=\\\"table table-striped\\\">\\n                    <tr>\\n                        <th>Title</th>\\n                        <th>Year</th>\\n                        <th>Actors</th>\\n                    </tr>\\n                    <tr *ngFor=\\\"let item of moviesDB\\\">\\n                        <td>{{item.title}}</td>\\n                        <td>{{item.year}}</td>\\n                        <td>{{item.actors}}</td>\\n                        <td><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onDeleteMovie(item)\\\">Delete</button></td>\\n                    </tr>\\n                </table>\\n        </div>\\n        <!-- 8th Section : Actor Movie -->\\n\\n        <div class=\\\"section\\\" *ngIf=\\\"section==8\\\">\\n            <h1>Select Actor</h1>\\n                <table class=\\\"table table-striped\\\">\\n                        <tr>\\n                          <th>Name</th>\\n                        </tr>\\n                        <tr *ngFor=\\\"let item of actorsDB\\\">\\n                          <td>{{item.name}}</td>\\n                          <td><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSelectUpdateActor(item)\\\">Select</button></td>\\n                        </tr>\\n                </table>\\n\\n                <table class=\\\"table table-striped\\\">\\n                  <h1>Add movie to Actor</h1>\\n                        <tr>\\n                            <th>Title</th>\\n                        </tr>\\n                        <tr *ngFor=\\\"let item of moviesDB\\\">\\n                            <td>{{item.title}}</td>\\n                            <td><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onSelectUpdateMovie(item)\\\">Select</button></td>\\n                        </tr>\\n                </table>\\n\\n                    <label for=\\\"actorName\\\">Full name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"actorName\\\" [(ngModel)]=\\\"fullName\\\">\\n                    <label for=\\\"movieName\\\">Movie Title</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"movieName\\\" [(ngModel)]=\\\"title\\\">\\n                    <button type='submit' class=\\\"btn btn-primary\\\" (click)=\\\"addMovieToActor()\\\">Add movie to actor</button>\\n        </div>\\n\\n        <!-- 9th Section : Top 3 -->\\n\\n        <div class=\\\"section\\\" *ngIf=\\\"section==9\\\">\\n\\n              <table class=\\\"table table-striped\\\">\\n                  <h1>Top 3 Movies</h1>\\n                        <tr>\\n                            <th>Title</th>\\n                        </tr>\\n\\n                        <tr *ngFor=\\\"let item of filterBy('title') |slice:0:3\\\">\\n                            <td>{{item.title}}</td>\\n                        </tr>\\n              </table>\\n\\n        </div>\\n\\n\\n\"","import { Component, OnInit } from \"@angular/core\";\nimport { DatabaseService } from \"../database.service\";\n\n@Component({\n  selector: \"app-actor\",\n  templateUrl: \"./actor.component.html\",\n  styleUrls: [\"./actor.component.css\"],\n})\nexport class ActorComponent implements OnInit {\n  actorsDB: any[] = [];\n  moviesDB: any[] = [];\n  moviesSort: any[] = [];\n\n  section = 1;\n\n  //actors\n  fullName: string = \"\";\n  bYear: number = 0;\n  actorId: string = \"\";\n\n  //movie\n  title: string = \"\";\n  year: number = 0;\n  actors: any[] = [];\n\n  movieID: string = \"\";\n  actorID: string = \"\";\n  \n\n\n  constructor(private dbService: DatabaseService) {}\n\n  //Get all Actors\n  onGetActors() {\n    this.dbService.getActors().subscribe((data: any[]) => {\n      this.actorsDB = data;\n    });\n  }\n  //Create a new Actor, POST request\n  onSaveActor() {\n    let obj = { name: this.fullName, bYear: this.bYear };\n    this.dbService.createActor(obj).subscribe(result => {\n      this.onGetActors();\n    });\n  }\n  // Update an Actor\n  onSelectUpdate(item) {\n    this.fullName = item.name;\n    this.bYear = item.bYear;\n    this.actorId = item._id;\n  }\n  onUpdateActor() {\n    let obj = { name: this.fullName, bYear: this.bYear };\n    this.dbService.updateActor(this.actorId, obj).subscribe(result => {\n      this.onGetActors();\n    });\n  }\n\n  //Delete Actor\n  onDeleteActor(item) {\n    this.dbService.deleteActor(item._id).subscribe(result => {\n      this.onGetActors();\n    });\n  }\n  // This lifecycle callback function will be invoked with the component get initialized by Angular.\n  ngOnInit() {\n    this.onGetActors();\n    this.onGetMovies();\n  }\n\n  changeSection(sectionId) {\n    this.section = sectionId;\n    this.resetValues();\n  }\n\n  resetValues() {\n    this.fullName = \"\";\n    this.bYear = 0;\n    this.actorId = \"\";\n  }\n\n  //added functionalities\n\n  //get movies\n  onGetMovies() {\n    this.dbService.getMovies().subscribe((data: any[]) => {\n      this.moviesDB = data;\n    });\n  }\n\n  onSaveMovie() {\n    let obj = { title: this.title, year: this.year };\n    this.dbService.createMovie(obj).subscribe(result => {\n      this.onGetMovies();\n    });\n  }\n\n  onDeleteMovie(item) {\n    this.dbService.deleteMovie(item._id).subscribe(result => {\n      this.onGetMovies();\n    });\n  }\n\n  onSelectUpdateActor(item) {\n    this.fullName = item.name;\n    this.bYear = item.bYear;\n  }\n\n  onSelectUpdateMovie(item) {\n    this.title = item.title;\n    this.year = item.year;\n  }\n\n\n\n  addMovie(){\n    const obj = { id: this.movieID};\n    this.dbService.addMovie(this.actorID, obj).subscribe(result => {\n      this.onGetActors();\n      this.onGetMovies();\n    });\n\n  }\n\n  filterBy(prop: string) {\n    let moviesSort = this.moviesDB;\n    return moviesSort.sort((a, b) => a[prop] > b[prop] ? 1 : a[prop] === b[prop] ? 0 : -1);\n  }\n\n\n  sortMovies(){\n\n  this.dbService.getTop3Movies().subscribe((data: any[]) => {\n    this.moviesDB = data;\n  });\n  }\n\n\n\n}\n\n","module.exports = \".nav-item{\\n    color: white !important;\\n}\\n\\n.btn btn-primary{\\n    color: white !important;\\n}\\n\\na{\\n    color: white !important;\\n\\n}\"","module.exports = \"<head>\\n    <title>Bootstrap Example</title>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\\n    <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\\\">\\n    <script src=\\\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\\\"></script>\\n    <script src=\\\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js\\\"></script>\\n    <script src=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\\\"></script>\\n</head>\\n<app-actor></app-actor>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'movieAng';\n}\n","import { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { AppComponent } from \"./app.component\";\nimport { ActorComponent } from \"./actor/actor.component\";\nimport { DatabaseService } from \"./database.service\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { FormsModule } from \"@angular/forms\";\n@NgModule({\n  declarations: [AppComponent, ActorComponent],\n  imports: [BrowserModule, HttpClientModule, FormsModule],\n  providers: [DatabaseService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({ \"Content-Type\": \"application/json\" }),\n};\n@Injectable({\n  providedIn: \"root\",\n})\nexport class DatabaseService {\n  constructor(private http: HttpClient) {}\n  result: any;\n  getActors() {\n    return this.http.get(\"/actors\");\n  }\n  getActor(id: string) {\n    let url = \"/actors/\" + id;\n    return this.http.get(url);\n  }\n  createActor(data) {\n    return this.http.post(\"/actors\", data, httpOptions);\n  }\n  updateActor(id, data) {\n    let url = \"/actors/\" + id;\n    return this.http.put(url, data, httpOptions);\n  }\n  deleteActor(id) {\n    let url = \"/actors/\" + id;\n    return this.http.delete(url, httpOptions);\n  }\n\n  //added functions\n  getMovies() {\n    return this.http.get(\"/movies\");\n  }\n\n  createMovie(data) {\n    return this.http.post(\"/movies\", data, httpOptions);\n  }\n\n  deleteMovie(id) {\n    let url = \"/movies/\" + id;\n    return this.http.delete(url, httpOptions);\n  }\n  addMovie(id, data){\n    let url = \"/actors/\" + id + '/movies';\n    return this.http.post(url,data,httpOptions);\n  }\n\n  sortMovies() {\n    return this.http.get(\"/movies\");\n  }\n  getTop3Movies(){\n    return this.http.get(\"/moviestop3\");\n\n  }\n\n\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}